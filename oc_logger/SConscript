##
# liboctbstack (static library) build script
##

Import('env', 'BUILD_TARGET', 'TARGET_CPU_ARCH', 'BUILD_DIR', 'SRC_TOP_DIR')

# Add third party libraries
SConscript(SRC_TOP_DIR + '/third_party_libs.scons')

liboc_logger_env = env.Clone()

######################################################################
# Build flags
######################################################################
liboc_logger_env.PrependUnique(CPPPATH = ['include'])

if BUILD_TARGET == 'android':
	liboc_logger_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	liboc_logger_env.AppendUnique(CPPDEFINES = ['_GLIBCXX_USE_C99=1', '_GLIBCXX_HAVE_WCSTOF=1'])

if BUILD_TARGET not in ['arduino', 'windows', 'winrt']:
	liboc_logger_env.AppendUnique(CFLAGS = ['-Wall', '-std=c99'])
	liboc_logger_env.AppendUnique(CXXFLAGS = ['-Wall', '-std=c++0x'])

######################################################################
# Source files and Targets
######################################################################
liboc_logger_core = liboc_logger_env.StaticLibrary('oc_logger_core', 'c/oc_logger.c',  OBJPREFIX='core')
liboc_logger = liboc_logger_env.StaticLibrary('oc_logger',
		['c/oc_logger.c', 'c/oc_console_logger.c', 'cpp/oc_ostream_logger.cpp'])
i_loggers = liboc_logger_env.Install(BUILD_DIR, [liboc_logger_core, liboc_logger])
Alias('liboc_logger', i_loggers)
env.AppendUnique(TS = ['liboc_logger'])