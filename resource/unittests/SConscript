
Import('env')
import os
import os.path
unittests_env = env.Clone()

src_dir = unittests_env.get('SRC_DIR')
######################################################################
# Build flags
######################################################################
unittests_env.PrependUnique(CPPPATH = [
		'../include',
		'../oc_logger/include',
		'../csdk/stack/include',
		'../csdk/ocsocket/include',
		'../csdk/ocrandom/include',
		'../csdk/logger/include',
		'../../extlibs/gtest/gtest-1.7.0/include',
		'../../extlibs/hippomocks-master/HippoMocks',
		'../../extlibs/hippomocks-master/HippoMocksTest'
		])

unittests_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-pthread'])
unittests_env.AppendUnique(LIBS = ['-lpthread'])
unittests_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
unittests_env.AppendUnique(LIBPATH = [src_dir + '/extlibs/gtest/gtest-1.7.0/lib/.libs'])
unittests_env.PrependUnique(LIBS = [
		'oc',
		'octbstack',
		'oc_logger',
		'connectivity_abstraction',
		'coap',
		'gtest',
		'gtest_main'
		])

if env.get('SECURED') == '1':
    unittests_env.AppendUnique(LIBS = ['tinydtls'])
unittests_env.ParseConfig('pkg-config --libs glib-2.0');

if not env.get('RELEASE'):
	unittests_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
unittests = unittests_env.Program('unittests', ['ConstructResourceTest.cpp',
                                                'OCPlatformTest.cpp',
                                                'OCResourceTest.cpp'])

Alias("unittests", [unittests])

env.AppendTarget('unittests')
if env.get('TEST') == '1':
	target_os = env.get('TARGET_OS')
	if target_os == 'linux':
		out_dir = env.get('BUILD_DIR')
		result_dir = env.get('BUILD_DIR') + '/test_out/'
		if not os.path.isdir(result_dir):
			os.makedirs(result_dir)
		unittests_env.AppendENVPath('GTEST_OUTPUT', ['xml:'+ result_dir])
		unittests_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
		unittests_env.AppendENVPath('LD_LIBRARY_PATH', ['./extlibs/gtest/gtest-1.7.0/lib/.libs'])
		ut = unittests_env.Command ('ut', None,
		 [out_dir + '/resource/unittests/unittests'])
		AlwaysBuild ('ut')