##
# The main build script
#
##

# Load common build config
# Load common build config
SConscript('./build/SConscript')

SConscript('extra_options.scons')
Import('env')

sample_env = env.Clone()

target_os = env.get('TARGET_OS')
transport = env.get('TARGET_TRANSPORT')
secured = env.get('SECURED')
buildsample = env.get('BUILD_SAMPLE')

print "Given Transport is %s" % transport
print "Given OS is %s" % target_os
print "Secured %s" % env.get('SECURED')
print "Build sample is set to %s" % buildsample

build_dir = env.get('BUILD_DIR')


if 'ALL' in transport:
	if target_os == 'linux':
		env.AppendUnique(CPPDEFINES = ['WIFI_ADAPTER', 'ETHERNET_ADAPTER','NO_EDR_ADAPTER','NO_LE_ADAPTER'])
	elif target_os == 'tizen':
		env.AppendUnique(CPPDEFINES = ['WIFI_ADAPTER', 'NO_ETHERNET_ADAPTER','EDR_ADAPTER','LE_ADAPTER'])
	else:
		env.AppendUnique(CPPDEFINES = ['WIFI_ADAPTER', 'ETHERNET_ADAPTER','EDR_ADAPTER','LE_ADAPTER'])
	print "CA Transport is ALL"
else:
	if 'BT' in transport:
		env.AppendUnique(CPPDEFINES = ['EDR_ADAPTER'])
		print "CA Transport is BT"
	else:
		env.AppendUnique(CPPDEFINES = ['NO_EDR_ADAPTER'])

	if 'BLE' in transport:
		env.AppendUnique(CPPDEFINES = ['LE_ADAPTER'])
		print "CA Transport is BLE"
	else:
		env.AppendUnique(CPPDEFINES = ['NO_LE_ADAPTER'])

	if 'WIFI' in transport:
		env.AppendUnique(CPPDEFINES = ['WIFI_ADAPTER'])
		print "CA Transport is WIFI"
	else:
		env.AppendUnique(CPPDEFINES = ['NO_WIFI_ADAPTER'])
	if 'ETHERNET' in transport:
		env.AppendUnique(CPPDEFINES = ['ETHERNET_ADAPTER'])
		print "CA Transport is ETHERNET"
	else:
		env.AppendUnique(CPPDEFINES = ['NO_ETHERNET_ADAPTER'])


if target_os == 'tizen':
	command = "sh build/tizen/gbsbuild.sh %s %s" % (transport, buildsample)
	print "Created Command is %s" % command
	gbs_script = env.Command('gbs_build', None, command)
	AlwaysBuild ('gbs_script')
elif target_os == 'arduino':
	SConscript('build/arduino/arduino.scons')

        # Build 'libcoap' library
        SConscript(build_dir + 'lib/libcoap-4.1.1/SConscript')

        # Build 'src' sub-project
        SConscript(build_dir + 'SConscript')

        # Build 'samples' sub-project
        SConscript(build_dir + 'samples/arduino/SConscript')
elif target_os == 'linux':

	# Build 'libcoap' library
	SConscript(build_dir  + 'lib/libcoap-4.1.1/SConscript')

	# Build 'src' sub-project
	SConscript(build_dir + 'SConscript')

	# Build 'samples' sub-project
	sample_env.SConscript(build_dir + 'samples/linux/SConscript')
elif target_os == 'android':

	# Build 'libcoap' library
	SConscript(build_dir  + 'lib/libcoap-4.1.1/SConscript')

	# Build 'src' sub-project
	SConscript(build_dir + 'SConscript')
