#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# resource container build script
##
import os
Import('env')

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', exports = 'lib_env')

resource_container_env = lib_env.Clone()
target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################
resource_container_env.AppendUnique(
	CPPPATH = [
		env.get('SRC_DIR')+'/extlibs', 
		'include', 
		'src',
		'../serverBuilder/include',
		'../common/primitiveResource/include'
	])

if target_os not in ['windows', 'winrt']:
    resource_container_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall'])
    if target_os != 'android':
        resource_container_env.AppendUnique(CXXFLAGS = ['-pthread'])

if target_os == 'android':
    resource_container_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
    resource_container_env.PrependUnique(LIBS = ['gnustl_shared', 'compatibility', 'log'])
	
#resource_container_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
resource_container_env.PrependUnique(LIBS = ['ServerBuilder', 'ServiceCommon', 'oc','octbstack', 'oc_logger', 'oc_logger_core', 'connectivity_abstraction', 'coap'])
resource_container_env.AppendUnique(LIBS = ['dl'])

######################################################################
# Source files and Targets
######################################################################
res_container_src = env.Glob('src/*.cpp')
res_container_static = resource_container_env.StaticLibrary('ResContainerLib', res_container_src)
res_container_shared = resource_container_env.SharedLibrary('ResContainerLib', res_container_src)

resource_container_env.InstallTarget([res_container_static,res_container_shared], 'libResContainer')

#resource_container_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])

#containertestapp = resource_container_env.Program('ContainerTest', res_container_src)
#Alias("containertest", containertestapp)
#env.AppendTarget('containertest')

#Go to build sample apps
#SConscript('resource-container/examples/SHPBundle/SConscript')

######################################################################
# build Sample Resource Bundle
######################################################################
SConscript('resource-container/examples/SampleBundle/SConscript')

sample_resource_bundle_env = resource_container_env.Clone()
sample_resource_bundle_env.AppendUnique(CCFLAGS = ['-fPIC'])

SAMPLE_RESOURCE_BUNDLE_DIR = 'examples/SampleBundle/'
sample_resource_bundle_env.AppendUnique(CPPPATH = [
		SAMPLE_RESOURCE_BUNDLE_DIR + 'include',
		'include/'
		])		
		

sample_resource_bundle_src = [ Glob(SAMPLE_RESOURCE_BUNDLE_DIR + 'src/*.cpp'), Glob('src/*.cpp')]

SampleBundle = sample_resource_bundle_env.SharedLibrary('SampleBundle', sample_resource_bundle_src)
sample_resource_bundle_env.InstallTarget(SampleBundle, 'libSampleBundle')

######################################################################
# Build Container Test
######################################################################
containertest_env = resource_container_env.Clone();
#containertest_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])

# Copy test configuration
Command("examples/ResourceContainerConfig.xml","examples/ResourceContainerConfig.xml", Copy("$TARGET", "$SOURCE"))
Ignore("examples/ResourceContainerConfig.xml", "examples/ResourceContainerConfig.xml")

containertestapp = containertest_env.Program('ContainerTest', res_container_src)
Alias("containertest", containertestapp)
env.AppendTarget('containertest')