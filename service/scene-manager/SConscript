#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# NotificationManager build script
##

Import('env')

if env.get('RELEASE'):
    env.AppendUnique(CCFLAGS = ['-Os'])
    env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
    env.AppendUnique(CCFLAGS = ['-g'])

if env.get('LOGGING'):
    env.AppendUnique(CPPDEFINES = ['TB_LOG'])

lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
scenemanager_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################
scenemanager_env.AppendUnique(CPPPATH = ['./include'])
scenemanager_env.AppendUnique(CPPPATH = ['./src'])
scenemanager_env.AppendUnique(CPPPATH = ['../../resource/csdk/connectivity/api'])
scenemanager_env.AppendUnique(CPPPATH = ['../resource-encapsulation/include'])
scenemanager_env.AppendUnique(CPPPATH = ['../resource-encapsulation/src/common/primitiveResource/include'])
scenemanager_env.AppendUnique(CPPPATH = ['../resource-encapsulation/src/common/expiryTimer/include'])

scenemanager_env.PrependUnique(LIBS = [
    'rcs_client',
    'rcs_server',
    'rcs_common',
    'oc',
    'octbstack',
    'oc_logger',
    'connectivity_abstraction',
    'libcoap'
    ])

if target_os not in ['windows', 'winrt']:
    scenemanager_env.AppendUnique(CXXFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0', '-std=c++0x'])

if target_os not in ['darwin', 'ios', 'windows', 'winrt']:
    scenemanager_env.AppendUnique(LINKFLAGS = ['-Wl,--no-undefined'])

if target_os == 'linux':
    scenemanager_env.AppendUnique(LIBS = ['pthread'])

if target_os == 'android':
    scenemanager_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
    scenemanager_env.AppendUnique(LIBS = ['gnustl_shared','log'])

    if not env.get('RELEASE'):
        scenemanager_env.AppendUnique(LIBS = ['log'])

######################################################################
# Source files and Targets
######################################################################
SCENE_SRC_DIR = './src/' 
scenemanager_src = [
        SCENE_SRC_DIR + 'SceneCollection.cpp',
        SCENE_SRC_DIR + 'SceneMemberObject.cpp',
        SCENE_SRC_DIR + 'SceneAction.cpp',
        SCENE_SRC_DIR + 'Scene.cpp',
        SCENE_SRC_DIR + 'SceneList.cpp',
        SCENE_SRC_DIR + 'SceneListResourceObject.cpp',
        SCENE_SRC_DIR + 'SceneCollectionResourceObject.cpp',
        SCENE_SRC_DIR + 'SceneMemberResourceObject.cpp',
        SCENE_SRC_DIR + 'SceneUtils.cpp'
        ]

if target_os in ['tizen','android'] :
    scenemanagersdk = scenemanager_env.SharedLibrary('scene_manager', scenemanager_src)
else :
    scenemanagersdk = scenemanager_env.StaticLibrary('scene_manager', scenemanager_src)

scenemanager_env.InstallTarget(scenemanagersdk, 'libscene_manager')
scenemanager_env.UserInstallTargetLib(scenemanagersdk, 'libscene_manager')
scenemanager_env.UserInstallTargetHeader('include/SceneList.h',\
    'service/scene-manager', 'SceneList.h')

# Go to build Unit test
#if target_os == 'linux':
#    SConscript('src/unittest/SConscript')

# Go to build sample apps
SConscript('sampleapp/SConscript')
