#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')

thinserver_env = env.Clone()
transport = thinserver_env.get('TARGET_TRANSPORT')

######################################################################
# Build flags
######################################################################
if 'BLE' in transport:
	thinserver_env.PrependUnique(CPPPATH = [
                '../../../../../resource/oc_logger/include',
	        '../../../../../resource/csdk/logger/include',
                '../../../../../resource/csdk/stack/include',
		'../../../../../extlibs/cjson',
		'../../../sdk/common',
		'../../../sdk/enrollee/arduino/ble',
		'../../../sdk/enrollee/common/inc',
		'../../../sdk/enrollee/common/src'
		])
	thinserver_env.AppendUnique(CPPDEFINES = ['TB_LOG', 'ESBLE'])	
else : 
	thinserver_env.PrependUnique(CPPPATH = [
                '../../../../../resource/oc_logger/include',
	        '../../../../../resource/csdk/logger/include',
                '../../../../../resource/csdk/stack/include',
		'../../../../../extlibs/cjson',
		'../../../sdk/common',
		'../../../sdk/enrollee/arduino/wifi',
		'../../../sdk/enrollee/common/inc',
		'../../../sdk/enrollee/common/src'
		])
	thinserver_env.AppendUnique(CPPDEFINES = ['TB_LOG', 'ESWIFI'])
	
thinserver_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])

thinserver_env.PrependUnique(LIBS = ['octbstack','ocsrm','connectivity_abstraction','coap', 'ESSDKLibrary'])
if 'BLE' in transport:
	thinserver = thinserver_env.Program('thinserver', 'thinserverble.cpp')
else :
	thinserver = thinserver_env.Program('thinserver', 'thinserver.cpp')
env.CreateBin('thinserver')

i_thinserver = thinserver_env.Install(env.get('BUILD_DIR'), thinserver)

Alias('thinserver', i_thinserver)
env.AppendTarget('thinserver')

if(thinserver_env['UPLOAD'] == True):
	from sys import platform as _platform
	if _platform == "linux" or _platform == "linux2":
		thinserver_env.Upload(env.get('BUILD_DIR') + '/service/easy-setup/sampleapp/arduino/thinserver/thinserver.hex')
	else:
		print 'Please use appropriate install method for your developing machine. Linux is the only supported platform right now.'
