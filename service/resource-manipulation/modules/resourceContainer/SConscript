#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# resource container build script
##
import os
Import('env')
import os.path

def filtered_glob(env, pattern, omit=[],
  ondisk=True, source=False, strings=False):
    return filter(
      lambda f: os.path.basename(f.path) not in omit,
      env.Glob(pattern))

env.AddMethod(filtered_glob, "FilteredGlob");

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', exports = 'lib_env')

resource_container_env = lib_env.Clone()
target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################

try:
	print 'Java Home: ', os.environ['JAVA_HOME']
	print 'Java Lib: ', os.environ['JAVA_LIB']
except KeyError:
	print '''
*********************************** Error *************************************
* Cannot build resource container. JAVA_HOME or JAVA_LIB are not set properly 
* Please configure JAVA_HOME to point to your Java 7 JDK and 
* JAVA_LIB to your folder containing libjvm
* Example: export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
*          export JAVA_LIB=/usr/lib/jvm/java-7-openjdk-i386/jre/lib/i386/server
*******************************************************************************	
	'''
	Return()
	

resource_container_env.AppendUnique(
	CPPPATH = [
		env.get('SRC_DIR')+'/extlibs', 
		'include',
		'include/internal',
		'bundle-api/include',
		'src',
		'../serverBuilder/include',
		'../common/primitiveResource/include',
		os.environ['JAVA_HOME']+'/include',
		os.environ['JAVA_HOME']+'/include/linux'
	])

if target_os not in ['windows', 'winrt']:
    resource_container_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall'])
    if target_os != 'android':
        resource_container_env.AppendUnique(CXXFLAGS = ['-pthread'])

if target_os == 'android':
    resource_container_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
    resource_container_env.PrependUnique(LIBS = ['gnustl_shared', 'compatibility', 'log'])
	

resource_container_env.AppendUnique(LIBPATH = [os.environ['JAVA_LIB']])
	
conf = Configure(resource_container_env)
if not conf.CheckLib('jvm'):
	print '''
*********************************** Error *************************************
* Cannot locate libjvm for resource container.
* Please check your JAVA_LIB to point to your folder containing libjvm.
* Example: export JAVA_LIB=/usr/lib/jvm/java-7-openjdk-i386/jre/lib/i386/server/
*******************************************************************************	
	'''
	resource_container_env = conf.Finish()
	Return()
resource_container_env = conf.Finish()

resource_container_env.PrependUnique(LIBS = ['server_builder', 'service_common', 'oc','octbstack', 'oc_logger', 'oc_logger_core', 'connectivity_abstraction'])
resource_container_env.AppendUnique(LIBS = ['dl', 'jvm'])	


######################################################################
# Source files and Targets
######################################################################
res_container_src = ['src/BaseActivator.cpp','src/BundleActivator.cpp','src/BundleInfo.cpp', 
	'src/BundleInfoInternal.cpp', 'src/BundleResource.cpp', 'src/Configuration.cpp', 'src/JavaBundleResource.cpp', 'src/ProtocolBridgeResource.cpp',
	'src/ProtocolBridgeConnector.cpp', 'src/ResourceContainer.cpp', 'src/ResourceContainerBundleAPI.cpp', 'src/ResourceContainerImpl.cpp', 
	'src/SoftSensorResource.cpp']
res_container_static = resource_container_env.StaticLibrary('ResContainerLib', res_container_src)
res_container_shared = resource_container_env.SharedLibrary('ResContainerLib', res_container_src)

resource_container_env.InstallTarget([res_container_static,res_container_shared], 'libResContainer')

######################################################################
# build soft sensor sample bundle
######################################################################

ss_resource_bundle_env = resource_container_env.Clone()
ss_resource_bundle_env.AppendUnique(CCFLAGS = ['-fPIC'])

SS_RESOURCE_BUNDLE_DIR = 'examples/SoftSensorSampleBundle/'
ss_resource_bundle_env.AppendUnique(CPPPATH = [
		SS_RESOURCE_BUNDLE_DIR + 'include',
		'include/'
		])		
		

ss_resource_bundle_src = [ Glob(SS_RESOURCE_BUNDLE_DIR + 'src/*.cpp'), Glob('src/*.cpp')]

SoftSensorBundle = ss_resource_bundle_env.SharedLibrary('SoftSensorBundle', ss_resource_bundle_src)
ss_resource_bundle_env.InstallTarget(SoftSensorBundle, 'libSoftSensorBundle')

######################################################################
# build hue sample bundle
######################################################################

conf2 = Configure(lib_env)
if not conf2.CheckLib('curl'):
	print '''X
*********************************** Error *************************************
* Cannot build hue sample. Please install libcurl.
* Example (Ubuntu): 
*	sudo apt get install libcurl4-openssl-dev
*	sudo ldconfig
* Hint: check with pkg-config --libc libcurl and clear scons cache.
* Skipping hue sample build.
*******************************************************************************	
	'''
else:
	hue_resource_bundle_env = resource_container_env.Clone()
	hue_resource_bundle_env.AppendUnique(CCFLAGS = ['-fPIC'])
	
	HUE_RESOURCE_BUNDLE_DIR = 'examples/HueSampleBundle/'
	hue_resource_bundle_env.AppendUnique(CPPPATH = [
			HUE_RESOURCE_BUNDLE_DIR + 'include',
			'include/'
			])		
		
	hue_resource_bundle_env.PrependUnique(LIBS = ['curl'])
		
	hue_resource_bundle_src = [ Glob(HUE_RESOURCE_BUNDLE_DIR + 'src/*.cpp'), Glob('src/*.cpp')]
	
	HueBundle = hue_resource_bundle_env.SharedLibrary('HueBundle', hue_resource_bundle_src)
	hue_resource_bundle_env.InstallTarget(HueBundle, 'libHueBundle')
lib_env = conf2.Finish()

######################################################################
# build resource container unit tests
######################################################################
SConscript('unittests/SConscript')

######################################################################
# Build Container Test
######################################################################
containertest_env = resource_container_env.Clone();
containertest_env.AppendUnique(LINKFLAGS=["-rdynamic"])

# Copy test configuration
Command("examples/ResourceContainerConfig.xml","examples/ResourceContainerConfig.xml", Copy("$TARGET", "$SOURCE"))
Ignore("examples/ResourceContainerConfig.xml", "examples/ResourceContainerConfig.xml")


containersampleapp_src =  [res_container_src , 'src/ContainerSample.cpp']
containersampleapp = containertest_env.Program('ContainerSample',containersampleapp_src)
Alias("containersample", containersampleapp)
env.AppendTarget('containersample')
